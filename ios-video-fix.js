// Script espec√≠fico para iOS Safari - Soluci√≥n de interacci√≥n de usuario
// Este script debe incluirse en TODOS los archivos HTML con videos

(function() {
    'use strict';
    
    let userInteracted = false;
    
    // Funci√≥n para habilitar reproducci√≥n de videos despu√©s de interacci√≥n
    function enableVideoPlayback() {
        if (userInteracted) return;
        
        console.log('üçé iOS Safari: Habilitando reproducci√≥n de videos despu√©s de interacci√≥n');
        
        const videos = document.querySelectorAll('video');
        videos.forEach(video => {
            // Preparar el video para reproducci√≥n
            video.load();
            
            // Intentar reproducir silenciosamente (esto "desbloquea" la reproducci√≥n)
            const playPromise = video.play();
            if (playPromise !== undefined) {
                playPromise.then(() => {
                    // Pausar inmediatamente despu√©s de "desbloquear"
                    video.pause();
                    video.currentTime = 0;
                    console.log('‚úÖ Video desbloqueado para reproducci√≥n:', video.id || 'video sin ID');
                }).catch(error => {
                    console.log('‚ö†Ô∏è No se pudo desbloquear video:', error.message);
                });
            }
        });
        
        userInteracted = true;
    }
    
    // Detectar primera interacci√≥n del usuario
    function setupUserInteractionDetection() {
        const events = ['touchstart', 'touchend', 'click', 'scroll', 'keydown'];
        
        function handleFirstInteraction() {
            enableVideoPlayback();
            
            // Remover listeners despu√©s de la primera interacci√≥n
            events.forEach(event => {
                document.removeEventListener(event, handleFirstInteraction, true);
            });
        }
        
        // Agregar listeners para detectar primera interacci√≥n
        events.forEach(event => {
            document.addEventListener(event, handleFirstInteraction, true);
        });
    }
    
    // Configuraci√≥n espec√≠fica para iOS Safari
    function setupIOSVideoOptimizations() {
        const videos = document.querySelectorAll('video');
        
        videos.forEach(video => {
            // Asegurar atributos correctos para iOS
            video.setAttribute('playsinline', 'true');
            video.setAttribute('webkit-playsinline', 'true');
            video.setAttribute('muted', 'true');
            video.setAttribute('preload', 'none');
            
            // Listener para manejar errores de carga
            video.addEventListener('error', function(e) {
                console.error('‚ùå Error cargando video:', this.src, e);
            });
            
            // Listener para cuando el video est√© listo
            video.addEventListener('canplaythrough', function() {
                console.log('‚úÖ Video listo para reproducir:', this.id || this.src);
            });
            
            // Mejorar compatibilidad con iOS
            video.addEventListener('loadstart', function() {
                console.log('üì• Iniciando carga de video:', this.id || this.src);
            });
        });
    }
    
    // Inicializar cuando el DOM est√© listo
    function init() {
        console.log('üöÄ Inicializando optimizaciones de video para iOS Safari');
        setupIOSVideoOptimizations();
        setupUserInteractionDetection();
    }
    
    // Ejecutar cuando el DOM est√© listo
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }
    
})();